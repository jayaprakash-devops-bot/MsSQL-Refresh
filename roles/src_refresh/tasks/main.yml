
---
- name: Ensure restore metadata available
  ansible.builtin.assert:
    that:
      - refresh_context.restore.full_backup is defined
    fail_msg: "Restore metadata not found. Ensure restore_gen role executed successfully."

- name: Summarize backup validation from restore context
  ansible.builtin.set_fact:
    src_full_backup: "{{ refresh_context.restore.full_backup }}"
    src_diff_backup: "{{ refresh_context.restore.diff_backup }}"

- name: Determine differential backup validity
  ansible.builtin.set_fact:
    src_diff_valid: "{{ src_diff_backup != {} and (src_diff_backup.backup_finish_date | default('') | length > 0) and (src_full_backup.backup_finish_date | default('') | length > 0) and (src_diff_backup.backup_finish_date >= src_full_backup.backup_finish_date) }}"

- name: Update log with backup summary
  ansible.builtin.set_fact:
    log_msg: "{{ log_msg ~ '
' ~ ('%Y-%m-%d %H:%M:%S' | strftime) ~ ' Source full backup located on ' ~ (src_full_backup.node | default('unknown')) ~ ' at ' ~ (src_full_backup.backup_finish_date | default('unknown')) }}"

- name: Log diff backup detection when present
  ansible.builtin.set_fact:
    log_msg: "{{ log_msg ~ '
' ~ ('%Y-%m-%d %H:%M:%S' | strftime) ~ ' Source diff backup located on ' ~ (src_diff_backup.node | default('unknown')) ~ ' at ' ~ (src_diff_backup.backup_finish_date | default('n/a')) }}"
  when: src_diff_backup != {}

- name: Prepare permissions script content
  community.general.mssql_script:
    login_host: "{{ refresh_context.source.primary_replica | default(src_instance) }}"
    login_user: "{{ sql_usr }}"
    login_password: "{{ sql_pwd }}"
    name: "{{ src_database }}"
    script: "{{ lookup('template', 'roles/dest_refresh/templates/script_perms.sql') }}"
    output: dict
  delegate_to: localhost
  register: src_permissions_raw
  no_log: true

- name: Combine permissions rows
  ansible.builtin.set_fact:
    src_perms_lines: "{{ src_permissions_raw.query_results_dict | json_query('[0][0]') | default([], true) | map(attribute='query') | list }}"
    src_perms_text: "{{ src_perms_lines | join('
') | regex_replace('use \[' ~ src_database ~ '\]', 'use [' ~ dest_database ~ ']') }}"

- name: Persist source permission script
  ansible.builtin.copy:
    content: "{{ src_perms_text }}"
    dest: "/tmp/{{ tower_job_id }}_src_perms.sql"
  delegate_to: localhost
  when: src_perms_text | trim != ''

- name: Gather source login scripts
  block:
    - name: Execute sp_script_login
      community.general.mssql_script:
        login_host: "{{ refresh_context.source.primary_replica | default(src_instance) }}"
        login_user: "{{ sql_usr }}"
        login_password: "{{ sql_pwd }}"
        script: "EXEC sp_script_login @script_scope = 'Server', @database_name = '{{ src_database }}'"
        output: dict
      delegate_to: localhost
      register: src_logins_raw
      no_log: true
  rescue:
    - name: Deploy sp_script_login helper
      community.general.mssql_script:
        login_host: "{{ refresh_context.source.primary_replica | default(src_instance) }}"
        login_user: "{{ sql_usr }}"
        login_password: "{{ sql_pwd }}"
        script: "{{ lookup('template', 'roles/dest_refresh/templates/sp_script_login.sql.j2') }}"
      delegate_to: localhost
      no_log: true
    - name: Re-run sp_script_login after deployment
      community.general.mssql_script:
        login_host: "{{ refresh_context.source.primary_replica | default(src_instance) }}"
        login_user: "{{ sql_usr }}"
        login_password: "{{ sql_pwd }}"
        script: "EXEC sp_script_login @script_scope = 'Server', @database_name = '{{ src_database }}'"
        output: dict
      delegate_to: localhost
      register: src_logins_raw
      no_log: true

- name: Compose source login script
  ansible.builtin.set_fact:
    src_logins_lines: "{{ src_logins_raw.query_results_dict | json_query('[0][0]') | default([], true) | map(attribute='sqltext') | list }}"
    src_logins_text: "{{ src_logins_lines | join('
') | regex_replace('DEFAULT_DATABASE = \[(?!master)[^\]]*\]', 'DEFAULT_DATABASE = [master]') }}"

- name: Persist source login script
  ansible.builtin.copy:
    content: "{{ src_logins_text }}"
    dest: "/tmp/{{ tower_job_id }}_src_logins.sql"
  delegate_to: localhost
  when: src_logins_text | trim != ''

- name: Update refresh context with source artifacts
  ansible.builtin.set_fact:
    refresh_context: "{{ refresh_context | combine({'source': (refresh_context.source | default({})) | combine({'permission_script': '/tmp/' ~ (tower_job_id | string) ~ '_src_perms.sql', 'login_script': '/tmp/' ~ (tower_job_id | string) ~ '_src_logins.sql', 'diff_backup_valid': src_diff_valid}, recursive=True)}, recursive=True) }}"
    log_msg: "{{ log_msg ~ '
' ~ ('%Y-%m-%d %H:%M:%S' | strftime) ~ ' Source login and permission scripts captured.' }}"
