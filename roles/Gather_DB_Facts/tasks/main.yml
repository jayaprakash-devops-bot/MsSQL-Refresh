
---
- name: Ensure refresh context container exists
  ansible.builtin.set_fact:
    refresh_context:
      source: {}
      target: {}
      actions: {}
  when: refresh_context is not defined

- name: Record source SQL major version
  community.general.mssql_script:
    login_host: "{{ src_instance }}"
    login_user: "{{ sql_usr }}"
    login_password: "{{ sql_pwd }}"
    script: "{{ lookup('template', 'sql/get_product_version.sql.j2') }}"
    output: dict
  delegate_to: localhost
  register: source_version_query
  no_log: true

- name: Update source version facts
  ansible.builtin.set_fact:
    refresh_context: "{{ refresh_context | combine({'source': (refresh_context.source | default({})) | combine({'instance': src_instance, 'database': src_database, 'product_major_version': (source_version_query.query_results_dict | json_query('[0][0][0].major_version') | default(0, true) | int)}, recursive=True)}, recursive=True) }}"
    log_msg: "{{ log_msg + '
' + ('%Y-%m-%d %H:%M:%S' | strftime) + ' Source version detected: ' + (source_version_query.query_results_dict | json_query('[0][0][0].major_version') | default(0, true) | string) }}"

- name: Detect HA capability on source instance
  community.general.mssql_script:
    login_host: "{{ src_instance }}"
    login_user: "{{ sql_usr }}"
    login_password: "{{ sql_pwd }}"
    script: "{{ lookup('template', 'sql/check_is_ha.sql.j2') }}"
    output: dict
  delegate_to: localhost
  register: source_ha_query
  no_log: true

- name: Update source HA facts
  ansible.builtin.set_fact:
    refresh_context: "{{ refresh_context | combine({'source': (refresh_context.source | default({})) | combine({'is_ha': ((source_ha_query.query_results_dict | json_query('[0][0][0].is_ha') | default(0, true) | int) == 1)}, recursive=True)}, recursive=True) }}"
    Is_HA_src: "{{ (source_ha_query.query_results_dict | json_query('[0][0][0].is_ha') | default(0, true) | int) == 1 }}"
    log_msg: "{{ log_msg + '
' + ('%Y-%m-%d %H:%M:%S' | strftime) + ' Source HA enabled: ' + (((source_ha_query.query_results_dict | json_query('[0][0][0].is_ha') | default(0, true) | int) == 1) | ternary('true','false')) }}"

- name: Gather AG membership for source database
  community.general.mssql_script:
    login_host: "{{ src_instance }}"
    login_user: "{{ sql_usr }}"
    login_password: "{{ sql_pwd }}"
    script: "{{ lookup('template', 'sql/get_database_ag_status.sql.j2') }}"
    params:
      database_name: "{{ src_database }}"
    output: dict
  delegate_to: localhost
  register: source_ag_status
  no_log: true

- name: Normalize source AG facts
  ansible.builtin.set_fact:
    source_ag_row: "{{ source_ag_status.query_results_dict | json_query('[0][0][0]') | default({}, true) }}"

- name: Compose source listener target
  ansible.builtin.set_fact:
    source_listener_compound: >-
      {% set name = source_ag_row.listener_name | default('') %}
      {% set port = source_ag_row.listener_port | default('') %}
      {% if name %}
      {{ name }}{% if port %},{{ port }}{% endif %}
      {% else %}
      {{ '' }}
      {% endif %}

- name: Update context for source AG data
  ansible.builtin.set_fact:
    refresh_context: "{{ refresh_context | combine({'source': (refresh_context.source | default({})) | combine({
      'database_in_ag': (source_ag_row.in_ag | default(0) | int) == 1,
      'ag_name': source_ag_row.ag_name | default('N/A'),
      'listener': (source_listener_compound | trim),
      'local_is_primary': (source_ag_row.is_primary_on_local | default(0) | int) == 1
    }, recursive=True)}, recursive=True) }}"
    src_ag_name: "{{ source_ag_row.ag_name | default('N/A') | trim }}"
    Is_DBHA_src: "{{ (source_ag_row.in_ag | default(0) | int) == 1 }}"
    log_msg: "{{ log_msg + '
' + ('%Y-%m-%d %H:%M:%S' | strftime) + ' Source database AG membership: ' + (source_ag_row.ag_name | default('N/A')) }}"

- name: Collect replica layout for source AG
  when: refresh_context.source.database_in_ag | default(false)
  community.general.mssql_script:
    login_host: "{{ src_instance }}"
    login_user: "{{ sql_usr }}"
    login_password: "{{ sql_pwd }}"
    script: "{{ lookup('template', 'sql/list_ag_replicas.sql.j2') }}"
    params:
      ag_name: "{{ refresh_context.source.ag_name }}"
    output: dict
  delegate_to: localhost
  register: source_replicas
  no_log: true

- name: Transform replica information for source
  when: refresh_context.source.database_in_ag | default(false)
  ansible.builtin.set_fact:
    source_replica_rows: "{{ source_replicas.query_results_dict | json_query('[0][0]') | default([], true) }}"
    source_primary_replica: "{{ source_replica_rows | selectattr('role_desc', 'equalto', 'PRIMARY') | map(attribute='replica_name') | list | first | default(src_instance) }}"
    source_secondary_replicas: "{{ source_replica_rows | selectattr('role_desc', 'equalto', 'SECONDARY') | map(attribute='replica_name') | list }}"

- name: Update primary/secondary nodes for source
  when: refresh_context.source.database_in_ag | default(false)
  ansible.builtin.set_fact:
    refresh_context: "{{ refresh_context | combine({'source': (refresh_context.source | default({})) | combine({
      'replicas': source_replica_rows,
      'primary_replica': source_primary_replica,
      'secondary_replicas': source_secondary_replicas
    }, recursive=True)}, recursive=True) }}"
    Primary_src_node: "{{ source_primary_replica }}"
    Secondary_src_node: "{{ source_secondary_replicas }}"
    log_msg: "{{ log_msg + '
' + ('%Y-%m-%d %H:%M:%S' | strftime) + ' Source primary replica: ' + source_primary_replica }}"

- name: Default primary node for source when not in AG
  when: not refresh_context.source.database_in_ag | default(false)
  ansible.builtin.set_fact:
    refresh_context: "{{ refresh_context | combine({'source': (refresh_context.source | default({})) | combine({'primary_replica': src_instance, 'secondary_replicas': []}, recursive=True)}, recursive=True) }}"
    Primary_src_node: "{{ src_instance }}"
    Secondary_src_node: []

- name: Record destination SQL major version
  community.general.mssql_script:
    login_host: "{{ dest_instance }}"
    login_user: "{{ sql_usr }}"
    login_password: "{{ sql_pwd }}"
    script: "{{ lookup('template', 'sql/get_product_version.sql.j2') }}"
    output: dict
  delegate_to: localhost
  register: dest_version_query
  no_log: true

- name: Update destination version facts
  ansible.builtin.set_fact:
    refresh_context: "{{ refresh_context | combine({'target': (refresh_context.target | default({})) | combine({'instance': dest_instance, 'database': dest_database, 'product_major_version': (dest_version_query.query_results_dict | json_query('[0][0][0].major_version') | default(0, true) | int)}, recursive=True)}, recursive=True) }}"
    log_msg: "{{ log_msg + '
' + ('%Y-%m-%d %H:%M:%S' | strftime) + ' Destination version detected: ' + (dest_version_query.query_results_dict | json_query('[0][0][0].major_version') | default(0, true) | string) }}"

- name: Detect HA capability on destination instance
  community.general.mssql_script:
    login_host: "{{ dest_instance }}"
    login_user: "{{ sql_usr }}"
    login_password: "{{ sql_pwd }}"
    script: "{{ lookup('template', 'sql/check_is_ha.sql.j2') }}"
    output: dict
  delegate_to: localhost
  register: dest_ha_query
  no_log: true

- name: Update destination HA facts
  ansible.builtin.set_fact:
    refresh_context: "{{ refresh_context | combine({'target': (refresh_context.target | default({})) | combine({'is_ha': ((dest_ha_query.query_results_dict | json_query('[0][0][0].is_ha') | default(0, true) | int) == 1)}, recursive=True)}, recursive=True) }}"
    Is_HA_dest: "{{ (dest_ha_query.query_results_dict | json_query('[0][0][0].is_ha') | default(0, true) | int) == 1 }}"
    log_msg: "{{ log_msg + '
' + ('%Y-%m-%d %H:%M:%S' | strftime) + ' Destination HA enabled: ' + (((dest_ha_query.query_results_dict | json_query('[0][0][0].is_ha') | default(0, true) | int) == 1) | ternary('true','false')) }}"

- name: Gather AG membership for destination database
  community.general.mssql_script:
    login_host: "{{ dest_instance }}"
    login_user: "{{ sql_usr }}"
    login_password: "{{ sql_pwd }}"
    script: "{{ lookup('template', 'sql/get_database_ag_status.sql.j2') }}"
    params:
      database_name: "{{ dest_database }}"
    output: dict
  delegate_to: localhost
  register: dest_ag_status
  no_log: true

- name: Normalize destination AG facts
  ansible.builtin.set_fact:
    dest_ag_row: "{{ dest_ag_status.query_results_dict | json_query('[0][0][0]') | default({}, true) }}"

- name: Compose destination listener target
  ansible.builtin.set_fact:
    dest_listener_compound: >-
      {% set name = dest_ag_row.listener_name | default('') %}
      {% set port = dest_ag_row.listener_port | default('') %}
      {% if name %}
      {{ name }}{% if port %},{{ port }}{% endif %}
      {% else %}
      {{ '' }}
      {% endif %}

- name: Update context for destination AG data
  ansible.builtin.set_fact:
    refresh_context: "{{ refresh_context | combine({'target': (refresh_context.target | default({})) | combine({
      'database_in_ag': (dest_ag_row.in_ag | default(0) | int) == 1,
      'ag_name': dest_ag_row.ag_name | default('N/A'),
      'listener': (dest_listener_compound | trim),
      'local_is_primary': (dest_ag_row.is_primary_on_local | default(0) | int) == 1
    }, recursive=True)}, recursive=True) }}"
    Dest_ag_name: "{{ dest_ag_row.ag_name | default('N/A') | trim }}"
    listener_name: "{{ dest_listener_compound | trim }}"
    Is_DBHA_dest: "{{ (dest_ag_row.in_ag | default(0) | int) == 1 }}"
    log_msg: "{{ log_msg + '
' + ('%Y-%m-%d %H:%M:%S' | strftime) + ' Destination database AG membership: ' + (dest_ag_row.ag_name | default('N/A')) }}"

- name: Collect replica layout for destination AG
  when: refresh_context.target.database_in_ag | default(false)
  community.general.mssql_script:
    login_host: "{{ dest_instance }}"
    login_user: "{{ sql_usr }}"
    login_password: "{{ sql_pwd }}"
    script: "{{ lookup('template', 'sql/list_ag_replicas.sql.j2') }}"
    params:
      ag_name: "{{ refresh_context.target.ag_name }}"
    output: dict
  delegate_to: localhost
  register: dest_replicas
  no_log: true

- name: Transform replica information for destination
  when: refresh_context.target.database_in_ag | default(false)
  ansible.builtin.set_fact:
    dest_replica_rows: "{{ dest_replicas.query_results_dict | json_query('[0][0]') | default([], true) }}"
    dest_primary_replica: "{{ dest_replica_rows | selectattr('role_desc', 'equalto', 'PRIMARY') | map(attribute='replica_name') | list | first | default(dest_instance) }}"
    dest_secondary_replicas: "{{ dest_replica_rows | selectattr('role_desc', 'equalto', 'SECONDARY') | map(attribute='replica_name') | list }}"
    dest_auto_seed_supported: "{{ (dest_replica_rows | map(attribute='seeding_mode_desc') | list | unique) == ['AUTOMATIC'] }}"

- name: Update primary/secondary nodes for destination
  when: refresh_context.target.database_in_ag | default(false)
  ansible.builtin.set_fact:
    refresh_context: "{{ refresh_context | combine({'target': (refresh_context.target | default({})) | combine({
      'replicas': dest_replica_rows,
      'primary_replica': dest_primary_replica,
      'secondary_replicas': dest_secondary_replicas,
      'auto_seed_supported': dest_auto_seed_supported
    }, recursive=True)}, recursive=True) }}"
    Primary_dest_node: "{{ dest_primary_replica }}"
    Secondary_dest_node: "{{ dest_secondary_replicas }}"
    log_msg: "{{ log_msg + '
' + ('%Y-%m-%d %H:%M:%S' | strftime) + ' Destination primary replica: ' + dest_primary_replica }}"

- name: Default primary node for destination when not in AG
  when: not refresh_context.target.database_in_ag | default(false)
  ansible.builtin.set_fact:
    refresh_context: "{{ refresh_context | combine({'target': (refresh_context.target | default({})) | combine({'primary_replica': dest_instance, 'secondary_replicas': [], 'auto_seed_supported': false}, recursive=True)}, recursive=True) }}"
    Primary_dest_node: "{{ dest_instance }}"
    Secondary_dest_node: []

- name: Determine contained AG status for destination
  when: refresh_context.target.database_in_ag | default(false)
  community.general.mssql_script:
    login_host: "{{ dest_instance }}"
    login_user: "{{ sql_usr }}"
    login_password: "{{ sql_pwd }}"
    script: "{{ lookup('template', 'sql/check_contained_ag.sql.j2') }}"
    params:
      ag_name: "{{ refresh_context.target.ag_name }}"
    output: dict
  delegate_to: localhost
  register: dest_contained_query
  no_log: true

- name: Record contained AG status
  when: refresh_context.target.database_in_ag | default(false)
  ansible.builtin.set_fact:
    ISContained_Dest: "{{ (dest_contained_query.query_results_dict | json_query('[0][0][0].is_contained') | default(0, true) | int) == 1 }}"
    refresh_context: "{{ refresh_context | combine({'target': (refresh_context.target | default({})) | combine({'is_contained': ISContained_Dest | bool}, recursive=True)}, recursive=True) }}"
    log_msg: "{{ log_msg + '
' + ('%Y-%m-%d %H:%M:%S' | strftime) + ' Destination contained AG: ' + (ISContained_Dest | ternary('true','false')) }}"

- name: Default contained flag when AG not in use
  when: not refresh_context.target.database_in_ag | default(false)
  ansible.builtin.set_fact:
    ISContained_Dest: false
    refresh_context: "{{ refresh_context | combine({'target': (refresh_context.target | default({})) | combine({'is_contained': false}, recursive=True)}, recursive=True) }}"

- name: Compute topology action flags
  ansible.builtin.set_fact:
    remove_dest_from_ag_flag: "{{ (refresh_context.target.database_in_ag | default(false)) and (refresh_context.target.is_ha | default(false)) and ((refresh_context.source.database_in_ag | default(false)) or (refresh_context.source.is_ha | default(false))) }}"
    dest_rejoin_method_flag: >-
      {% if not (refresh_context.target.database_in_ag | default(false)) %}
      none
      {% elif (refresh_context.target.product_major_version | default(0)) <= 13 %}
      backup
      {% elif refresh_context.target.auto_seed_supported | default(false) %}
      autoseed
      {% else %}
      backup
      {% endif %}

- name: Finalize topology action context
  ansible.builtin.set_fact:
    refresh_context: "{{ refresh_context | combine({'actions': {
      'remove_dest_from_ag': remove_dest_from_ag_flag | bool,
      'target_has_secondaries': (refresh_context.target.secondary_replicas | default([])) | length > 0,
      'rejoin_method': dest_rejoin_method_flag | trim
    }}, recursive=True) }}"
    log_msg: "{{ log_msg + '
' + ('%Y-%m-%d %H:%M:%S' | strftime) + ' Dest remove-from-AG required: ' + (remove_dest_from_ag_flag | ternary('true','false')) }}"

- name: Expose convenience facts
  ansible.builtin.set_fact:
    remove_dest_from_ag: "{{ refresh_context.actions.remove_dest_from_ag | default(false) }}"
    dest_rejoin_method: "{{ refresh_context.actions.rejoin_method | default('none') }}"
    target_has_secondaries: "{{ refresh_context.actions.target_has_secondaries | default(false) }}"
