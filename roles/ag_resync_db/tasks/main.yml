
---
- name: Validate AG rejoin prerequisites
  ansible.builtin.assert:
    that:
      - refresh_context.target.ag_name is defined
      - refresh_context.target.ag_name | length > 0
      - dest_rejoin_method | default(refresh_context.actions.rejoin_method | default('none')) != 'none'
    fail_msg: "Insufficient data to rejoin database to availability group."

- name: Set rejoin execution variables
  ansible.builtin.set_fact:
    ag_rejoin_method: "{{ dest_rejoin_method | default(refresh_context.actions.rejoin_method) }}"
    ag_name: "{{ refresh_context.target.ag_name }}"

- name: Autoseed database back into AG
  when: ag_rejoin_method == 'autoseed'
  community.general.mssql_script:
    login_host: "{{ refresh_context.target.primary_replica | default(dest_instance) }}"
    login_user: "{{ sql_usr }}"
    login_password: "{{ sql_pwd }}"
    script: |
      ALTER AVAILABILITY GROUP [{{ ag_name }}]
          ADD DATABASE [{{ dest_database }}];
  delegate_to: localhost
  register: ag_add_result
  no_log: true

- name: Log auto seed initiation
  when: ag_rejoin_method == 'autoseed'
  ansible.builtin.set_fact:
    log_msg: "{{ log_msg }}{{ '\n' }}{{ '%Y-%m-%d %H:%M:%S' | strftime }} Initiated automatic seeding for {{ dest_database }} into AG {{ ag_name }}"

- name: Warn when manual seeding required
  when: ag_rejoin_method == 'backup'
  ansible.builtin.debug:
    msg: >-
      Manual re-seeding is required for {{ dest_database }} on availability group {{ ag_name }}.
      Restore the database on each secondary with NORECOVERY using the latest backup set and rerun this
      role with dest_rejoin_method set to 'autoseed'.

- name: Update context for AG rejoin outcome
  ansible.builtin.set_fact:
    refresh_context: "{{ refresh_context | combine({'actions': (refresh_context.actions | default({})) | combine({'ag_rejoin_attempted': ag_rejoin_method})}, recursive=True) }}"
