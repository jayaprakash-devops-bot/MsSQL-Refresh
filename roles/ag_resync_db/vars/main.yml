key: 
exec_sql_user: false
append_result: false
appended_result: []
scalar_return: 
db_name:
encrypt_state:
# port:
sql_version:
inst_name:
time_string: "{{ '%Y_%m_%d_%H%M%S' | strftime }}"
gen:
  server_property: |    
    SELECT SERVERPROPERTY('ComputerNamePhysicalNetBIOS') AS Value
  get_comma_delimited_db_list: |
    declare @db_list varchar (4096)
      set @db_list = ''

      select @db_list = 
          case when @db_list = ''
          then [name]
          else @db_list + coalesce(',' + [name], '')
          end
      From sys.databases 
      Where database_id > 4 and state_desc = 'ONLINE' AND DATABASEPROPERTYEX([name],'Updateability') = 'READ_WRITE'

      SELECT  @db_list AS Value
  get_port: |
     SELECT TOP 1 SQLInstancePort AS Value FROM [DBA_DatabaseInfo].[dbo].[vw_SQLInstance] 
      WHERE SQLInstanceName like '%{{ inst_name }}%'
  get_backup_dir: |
    CREATE TABLE #results
        (
          Value VARCHAR(24), 
          Data VARCHAR(256)
        )
        INSERT INTO #results
        EXEC  master.dbo.xp_instance_regread  
        N'HKEY_LOCAL_MACHINE', N'Software\Microsoft\MSSQLServer\MSSQLServer',N'BackupDirectory'

        SELECT Data AS Value FROM #results  
ag:
  check_status: |
    select * from sys.dm_hadr_physical_seeding_stats on {{ Primary_dest_node }}
  contained: | 
    IF EXISTS (SELECT * FROM sys.availability_groups WHERE name = '{{ Dest_ag_name }}' AND COLUMNPROPERTY(object_id('sys.availability_groups'), 'is_contained', 'ColumnId') IS NOT NULL)
    SELECT 'true' as value
    ELSE
    SELECT 'false' as value;
  join_secondary: |
    ALTER DATABASE [{{ dest_database }}] SET HADR AVAILABILITY GROUP = {{ Dest_ag_name }}; 
  add_database_primary: |
    ALTER AVAILABILITY GROUP {{ Dest_ag_name }} ADD DATABASE [{{ dest_database }}];   
  primary_instance: |
    SELECT
        RCS.replica_server_name as Value
      FROM
      sys.availability_groups_cluster AS AGC
        INNER JOIN sys.dm_hadr_availability_replica_cluster_states AS RCS ON
          RCS.group_id = AGC.group_id
        INNER JOIN sys.dm_hadr_availability_replica_states AS ARS ON
          ARS.replica_id = RCS.replica_id
        INNER JOIN sys.availability_group_listeners AS AGL ON
          AGL.group_id = ARS.group_id
      WHERE
      ARS.role_desc = 'PRIMARY' AND AGC.name = '{{ Dest_ag_name }}'
  secondary_instances: |
    SELECT
        RCS.replica_server_name Value--,ARS.role_desc
      FROM
      sys.availability_groups_cluster AS AGC
        INNER JOIN sys.dm_hadr_availability_replica_cluster_states AS RCS ON
          RCS.group_id = AGC.group_id
        INNER JOIN sys.dm_hadr_availability_replica_states AS ARS ON
          ARS.replica_id = RCS.replica_id
        INNER JOIN sys.availability_group_listeners AS AGL ON
          AGL.group_id = ARS.group_id
      WHERE
      ARS.role_desc = 'SECONDARY' AND AGC.name = '{{ Dest_ag_name }}'    
  get_txnlog_job_id: |
    SELECT CAST(job_id AS VARCHAR(128)) AS Value FROM msdb.dbo.sysjobs WHERE UPPER([name]) LIKE UPPER('Maintenance%txnlog%')
db:
  backup:
    full_native_16_17: |  #native striped backup with compression for TDE
      BACKUP DATABASE [$_] 
        TO  
        DISK = N'{{ backup_location|trim }}\$_-full_{{ time_string }}_1.bak',
        DISK = N'{{ backup_location|trim }}\$_-full_{{ time_string }}_2.bak',
        DISK = N'{{ backup_location|trim }}\$_-full_{{ time_string }}_3.bak',
        DISK = N'{{ backup_location|trim }}\$_-full_{{ time_string }}_4.bak',
        DISK = N'{{ backup_location|trim }}\$_-full_{{ time_string }}_5.bak',
        DISK = N'{{ backup_location|trim }}\$_-full_{{ time_string }}_6.bak'

        WITH  DESCRIPTION = N'Backed up for adding to AG'
          ,  FORMAT,  NAME = N'$_ -Full Database Backup' 
          , BUFFERCOUNT = 1024
        , BLOCKSIZE = 65536
        , MAXTRANSFERSIZE=2097152,
          SKIP, NOREWIND, NOUNLOAD, COMPRESSION,  STATS = 10
        GO
    full_native_14: |  #native striped backup with no compression for TDE
      BACKUP DATABASE [$_] 
        TO  
        DISK = N'{{ backup_location|trim }}\$_-full_{{ time_string }}_1.bak',
        DISK = N'{{ backup_location|trim }}\$_-full_{{ time_string }}_2.bak',
        DISK = N'{{ backup_location|trim }}\$_-full_{{ time_string }}_3.bak',
        DISK = N'{{ backup_location|trim }}\$_-full_{{ time_string }}_4.bak',
        DISK = N'{{ backup_location|trim }}\$_-full_{{ time_string }}_5.bak',
        DISK = N'{{ backup_location|trim }}\$_-full_{{ time_string }}_6.bak'

        WITH  DESCRIPTION = N'Backed up for adding to AG'
          ,  FORMAT,  NAME = N'$_ -Full Database Backup' 
          , BUFFERCOUNT = 100
        , BLOCKSIZE = 65536
        , MAXTRANSFERSIZE=4194304,
          SKIP, NOREWIND, NOUNLOAD, NO_COMPRESSION,  STATS = 10
        GO       
    full_ls: |
      exec master.dbo.xp_backup_database
          @database = N'$_', 
          @backupname = N'$_ - Full Database Backup', 
          @desc = N'Full Backup of $_ on %Y-%m-%d %I:%M:%S %p', 
          @throttle = 50, 
          @maxtransfersize = 4194304, 
          @buffercount = 80, 
          @threads = 4, 
          @compressionlevel = 0,
          @filename = N'{{ backup_location|trim }}\%D_%T_%DATETIME%_1.bak',
          @filename = N'{{ backup_location|trim }}\%D_%T_%DATETIME%_2.bak',
          @filename = N'{{ backup_location|trim }}\%D_%T_%DATETIME%_3.bak',
          @filename = N'{{ backup_location|trim }}\%D_%T_%DATETIME%_4.bak',
          @init = 0, 
          @returndetails = 1
          GO
    full_ls_16_17: |  #full backup for 2016 and above 
      exec master.dbo.xp_backup_database
          @database = N'$_', 
          @backupname = N'$_ - Full Database Backup', 
          @desc = N'Full Backup of $_ on %Y-%m-%d %I:%M:%S %p', 
          @throttle = 50, 
          @maxtransfersize = 4194304, 
          @buffercount = 80, 
          @threads = 8, 
          @compressionlevel = 1,
          @filename = N'{{ backup_location|trim }}\%D_%T_%DATETIME%_1.bak',
          @filename = N'{{ backup_location|trim }}\%D_%T_%DATETIME%_2.bak',
          @filename = N'{{ backup_location|trim }}\%D_%T_%DATETIME%_3.bak',
          @filename = N'{{ backup_location|trim }}\%D_%T_%DATETIME%_4.bak',
          @filename = N'{{ backup_location|trim }}\%D_%T_%DATETIME%_5.bak',
          @filename = N'{{ backup_location|trim }}\%D_%T_%DATETIME%_6.bak',
          @init = 0, 
          @returndetails = 1
          GO          
    txn_ls: |
      exec master.dbo.xp_backup_log
          @database = N'$_', 
          @backupname = N'$_ - Transaction Log Backup', 
          @desc = N'Transaction Log Backup of $_ on %Y-%m-%d %I:%M:%S %p', 
          @throttle = 30, 
          @maxtransfersize = 4194304, 
          @buffercount = 20, 
          @threads = 1, 
          @compressionlevel = 1,
          @filename = N'{{ backup_location|trim }}\%D_%T_%DATETIME%_4.trn',
          @init = 0, 
          @returndetails = 1
          GO
    txn_native: |
      BACKUP LOG [$_] TO  
        DISK = N'{{ backup_location|trim }}\$_-tlog_{{ time_string }}_1.trn' 
        WITH NOFORMAT, NOINIT,  NAME = N'$_-Full Database Backup', SKIP, NOREWIND, NOUNLOAD, COMPRESSION
        GO
      
  restore: 
    automated_ls: |
       exec master.dbo.xp_restore_automated @database = N'$_' ,
          @backuppath = N'{{ backup_location|trim }}',
          @backupextension = N'bak, trn',
          @checksubfolders = 0,
          @sourceserver = N'{{ primary_instance_name|trim }}',
          @sourcedatabase = N'$_',
          @backuptype = N'tlog',
          @affinity = 0,
          @logging = 0,
          @DontUseReplication = 1,
          @withreplace = 1,
          @dryrun = 1,
          @with = N'NORECOVERY',
          @with = N'STATS = 10'
          GO
    restore_gen_ls: |
      exec sp_restoregene @database='$_',@RestoreScriptOnly=1,@WithReplace=1,@WithRecovery=0
  recovery:
    set_full: |
      USE [master] ;  
        ALTER DATABASE [$_] SET RECOVERY FULL ;
tde:
  set_db_encryption_key: |
    
      IF NOT EXISTS (SELECT * FROM sys.dm_database_encryption_keys WHERE database_id = DB_ID())
        BEGIN
          CREATE DATABASE ENCRYPTION KEY WITH ALGORITHM = AES_256 ENCRYPTION BY SERVER ASYMMETRIC KEY {{ key_name }};
        END  
      ELSE
        BEGIN
          ALTER DATABASE ENCRYPTION KEY ENCRYPTION BY SERVER ASYMMETRIC KEY {{ key_name }};
        END  
  set_db_encryption: |
    DECLARE @current_state int
    SELECT @current_state = encryption_state FROM sys.dm_database_encryption_keys WHERE database_id = DB_ID() 

    IF ((@current_state = 3 AND '{{ encrypt_state }}' = 'OFF') OR (@current_state = 1 AND '{{ encrypt_state }}' = 'ON'))
      BEGIN
        ALTER DATABASE [{{ database | trim }}] SET ENCRYPTION {{ encrypt_state }}
      END