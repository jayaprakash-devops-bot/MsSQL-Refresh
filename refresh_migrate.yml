---
- hosts: "{{ ctrl_server }}"
  gather_facts: true

  vars:
    dry_run: true
    log_msg: "{{ '%Y-%m-%d %H:%M:%S' | strftime }} Starting the database restore/migration "  
    paths_attach: []
    ag_name: "No AG was defined"
    isContained: false

  tasks:
    - name: start refresh
      block:
        - name: CyberArk credentials
          include_role:
            name: CyberArk

        - name: Gather_DB_Facts
          include_role:
            name: Gather_DB_Facts

        - name: generate a restore script
          include_role:
            name: restore_gen

        - set_fact:
            log_msg:  "{{ log_msg + '\n' + '%Y-%m-%d %H:%M:%S' | strftime + ' Begin work on the source  \r\n'}}"

        - name: work on source
          include_role:
            name: src_refresh

        - set_fact:
            log_msg:  "{{ log_msg + '\n' + '%Y-%m-%d %H:%M:%S' | strftime + ' Begin work on the destination \r\n'}}"
                    
        - name: work on destination
          include_role:
            name: dest_refresh

      always:
        - name: create temp file for log
          copy:
            content: "{{ log_msg }}"  
            dest: "/tmp/{{tower_job_id}}_output.log"
          delegate_to: localhost
          register: write_log_to_file  

        - name: create attachment string for run log
          set_fact:
            paths_attach: "{{ paths_attach }} + ['/tmp/{{tower_job_id}}_output.log']"
          when: write_log_to_file is defined

        - name: get recipients from passed list
          delegate_to: localhost
          run_once: true    
          set_fact:
              recs: "{{ notify_email|join(',') }}"
          register: email_passed_dic    
          when: notify_email | type_debug == 'list'

        - name: get recipients from string
          delegate_to: localhost
          run_once: true    
          set_fact:
              recs: "{{ notify_email }}"
          when: email_passed_dic is skipped

        - name: print recs
          debug: 
            msg: "{{ recs }}"  
            verbosity: 3

        - name: "email the results to {{notify_email}}"
          mail: 
            host: "{{ smtp_server }}"
            port: 25
            subject: "Refresh Database Results - Job ID {{ tower_job_id }}"
            body: "{{ lookup('template','results_email.j2', errors='warn')}}"
            from: "{{ ctrl_server }}@energytransfer.com"
            to: "{{ recs }}"
            attach: 
              - /tmp/{{ tower_job_id }}_output.log
              - /tmp/{{ tower_job_id }}_all_scripts.zip
          delegate_to: localhost
          register: sendmail_out
          ignore_errors: true
          
        - name: get all temp files created
          find:
            paths: /tmp
            patterns: "{{tower_job_id}}*.*,*.sql,*.log"
          delegate_to: localhost   
          register: temp_files_to_delete
          when: not ISContained_Dest

        - name: clean up all temp files created
          file:
            path: "{{item.path}}" 
            state: absent
          delegate_to: localhost
          with_items: "{{temp_files_to_delete.files}}"
          when: not ISContained_Dest

        - name:  send log when there is a failure sending the email
          shell: |
              [string]$body=@'
                  {{ log_msg }}
              '@
                
              $msg = new-object Net.Mail.MailMessage
              $msg.from = "{{ ctrl_server }}@energytransfer.com"

              $msg.Subject = "Logged information from this refresh - Job ID {{ tower_job_id }}"
              $msg.Body = $body       

              $mailer = new-object Net.Mail.SMTPclient("{{ smtp_server }}")
              
              foreach($a in "{{ recs }}".Split(","))
              {$msg.to.Add($a)}

              $mailer.send($msg) 
          args:
              executable: pwsh
          delegate_to: localhost
          when: sendmail_out is failed       
      
      rescue:
        - name: add info about any failures to log  
          set_fact:
            log_msg: "{{ log_msg + '\n' + '%Y-%m-%d %H:%M:%S' | strftime + ' ****Failed Task- ' + ansible_failed_task.name + ' failed with error**** \r' +  ansible_failed_result.stderr }}"            

        - name:  send log when there is a failure
          shell: |
              [string]$body=@'
                  {{ log_msg }}
              '@
              $msg = new-object Net.Mail.MailMessage
              $msg.from = "{{ ctrl_server }}@energytransfer.com"

              $msg.Subject = "Logged information from this refresh - Job ID {{ tower_job_id }}"
              $msg.Body = $body       

              $mailer = new-object Net.Mail.SMTPclient("{{ smtp_server }}")
              
              foreach($a in "{{ recs }}".Split(","))
              {$msg.to.Add($a)}

              $mailer.send($msg) 
          args:
              executable: pwsh
          delegate_to: localhost      

# - import_playbook: ag_resync_db.yml
#   when: 
#     - rejoin_ag | bool
#     - Dest_ag_name != "N/A"

# - import_playbook: ag_resync_db.yml
#   when: (rejoin_ag | bool) and ag_details.agname != "N/A"

- import_playbook: refresh_migrate_2.yml
  when: 
    - rejoin_ag | bool
    - Dest_ag_name != "N/A"
    - restore_script_stat is defined
    - restore_script_stat.stat.exists
    - restore_script_stat.stat.size > 0